Title         : Guide to asyncawait v1.0
Author        : 翻译：董天逸
Logo          : True

[TITLE]

# 介绍 

asyncawait在Node.js JavaScript解决callback hell问题。灵感来自于C #异步/等特征，
asyncawait使你写出现在每一个异步操作的功能块，等待结果再继续下面的语句。例如，您
可以用简单的JavaScript编写以下内容：   
    
``` javascript
var foo = async (function() {   
        var resultA = await (firstAsyncCall());   
        var resultB = await (secondAsyncCallUsing(resultA));   
        var resultC = await (thirdAsyncCallUsing(resultB));  
        return doSomethingWith(resultC);   
    }); 
```
      
  其中，有一个前提，是语义上等同于：  
  
``` javascript
function foo2(callback) {  
    firstAsyncCall(function (err, resultA) {  
        if (err) { callback(err); return; }  
        secondAsyncCallUsing(resultA, function (err, resultB) {  
            if (err) { callback(err); return; }  
            thirdAsyncCallUsing(resultB, function (err, resultC) {  
                if (err) {  
                    callback(err);  
                } else {  
                    callback(null, doSomethingWith(resultC));  
                }  
            });  
  
        });  
    });  
}  
```

尽管该函数的同步外观，但它不会阻塞节点的事件循环。三个异步操作中的每个执行期间都会暂停执行，
但Node的事件循环可以执行其他代码，而这些操作正在等待。您可以在HTTP请求处理程序中编写上面的
示例那样的代码，并用许多同时连接实现高吞吐量，就像基于回调的异步处理程序一样。  
  
总之，asyncawait娶异步代码的高并发的视觉清晰度和同步代码的简洁性。而不是通过回调和错误的背
后，你可以返回值和使用try/catch块。而不需要专门的异步控制流结构，而每一样，你可以
用纯JavaScript构造如for和while循环。      
  
  
# 特征/技巧总结
* 消除回调意大利面条代码。
* 允许使用普通JavaScript控制流结构进行异步操作。
* 语法是纯JavaScript，和行为像C #异步/等待。
* 无缝互操作与大多数其他图书馆，包括快递、摩卡，下划线，蓝鸟，等。
* 快速轻量级。
* 完全无阻塞。
* 不需要ES6发生器。
* 没有代码预处理或特殊构建步骤，只需正常编写和执行代码即可。
* 节点光纤构建。
* TypeScript和x-to-javascript友好（因为不需要ES6发生器）。
* TypeScript typings嵌入式。
* 只有在Node.js，不是在浏览器（因为它使用节点纤维）。
  

# 那怎么使用呢？

